return(output)
}
word_1_v = lsa_model[which(words==word_1),]
cos_vals = c()
for (i in 1:nrow(lsa_model)) { # faster to do matrix form; but we have a small dataset...
word_2 = words[i]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
cos_vals = c(cos_vals,cos_val)
}
output = paste('Below are the closest words in meaning to',word_1)
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
ixes = sort(cos_vals,decreasing=T,index=T)$ix
for (i in 1:10) {
output = paste(words[ixes[i]],'with a cosine of',round(cos_vals[ixes[i]],2))
print(output)
if (speak_output) {
output = paste(words[ixes[i]],'with a cosine of point',as.english(round(cos_vals[ixes[i]],2)))
library(english)
play_audio(output,destfile)
}
}
}
install.packages("english")
raw_text = get_texts(c('https://en.wikipedia.org/wiki/Brain','https://en.wikipedia.org/wiki/Car','https://en.wikipedia.org/wiki/Communication'),speak_output=T)
term_by_doc_matrix = build_term_doc_matrix(raw_text,speak_output=T)
build_term_doc_matrix = function(raw_text,speak_output=F,destfile='/Users/rickdale/temp.wav') {
output = 'Building the term-by-document matrix. Might have to wait a minute or two.'
if (speak_output) {
play_audio(output,destfile)
}
print(output)
unique_words = sort(unique(unlist(strsplit(gsub('\n',' ',raw_text),' ')))) # let's get unique word list
nr = length(unique_words) # how many words are in that set?
documents = unlist(strsplit(raw_text,'\n'))
documents = documents[nchar(documents)>50]
nc = length(documents) # number of documents
term.X.doc = matrix(0,nrow=nr,ncol=nc) # let's initialize a term by document matrix
# nrow = number of words / ncol = number of documents
# it's a small set so we can loop... for more complex processes, see dplyr
# it's astonishing
for (i in 1:nc) {
doc_words = unlist(strsplit(documents[i],' '))
ixes = unlist(lapply(doc_words,function(x) { which(unique_words==x) }))
counts = table(ixes)
term.X.doc[as.numeric(names(counts)),i] = counts
}
row.names(term.X.doc) = unique_words
colnames(term.X.doc) = paste("paragraph",1:nc)
term.X.doc = term.X.doc[nchar(row.names(term.X.doc))>2,]
term.X.doc=term.X.doc[rowSums(term.X.doc)>2,]
term.X.doc=log(term.X.doc+1)
term.X.doc=term.X.doc[rowSums(term.X.doc)>0,]
output = 'Matrix done. It is now stored in the variable you set to the left of the equal sign.'
if (speak_output) {
wait(30)
play_audio(output,destfile)
}
print(output)
return(term.X.doc)
}
term_by_doc_matrix = build_term_doc_matrix(raw_text,speak_output=T)
build_term_doc_matrix = function(raw_text,speak_output=F,destfile='/Users/rickdale/temp.wav') {
output = 'Building the term-by-document matrix. Might have to wait a minute or two.'
if (speak_output) {
play_audio(output,destfile)
wait(30)
}
print(output)
unique_words = sort(unique(unlist(strsplit(gsub('\n',' ',raw_text),' ')))) # let's get unique word list
nr = length(unique_words) # how many words are in that set?
documents = unlist(strsplit(raw_text,'\n'))
documents = documents[nchar(documents)>50]
nc = length(documents) # number of documents
term.X.doc = matrix(0,nrow=nr,ncol=nc) # let's initialize a term by document matrix
# nrow = number of words / ncol = number of documents
# it's a small set so we can loop... for more complex processes, see dplyr
# it's astonishing
for (i in 1:nc) {
doc_words = unlist(strsplit(documents[i],' '))
ixes = unlist(lapply(doc_words,function(x) { which(unique_words==x) }))
counts = table(ixes)
term.X.doc[as.numeric(names(counts)),i] = counts
}
row.names(term.X.doc) = unique_words
colnames(term.X.doc) = paste("paragraph",1:nc)
term.X.doc = term.X.doc[nchar(row.names(term.X.doc))>2,]
term.X.doc=term.X.doc[rowSums(term.X.doc)>2,]
term.X.doc=log(term.X.doc+1)
term.X.doc=term.X.doc[rowSums(term.X.doc)>0,]
output = 'Matrix done. It is now stored in the variable you set to the left of the equal sign.'
if (speak_output) {
wait(30)
play_audio(output,destfile)
}
print(output)
return(term.X.doc)
}
term_by_doc_matrix = build_term_doc_matrix(raw_text,speak_output=T)
build_term_doc_matrix = function(raw_text,speak_output=F,destfile='/Users/rickdale/temp.wav') {
output = 'Building the term-by-document matrix. Might have to wait a minute or two.'
if (speak_output) {
play_audio(output,destfile)
wait(1)
}
print(output)
unique_words = sort(unique(unlist(strsplit(gsub('\n',' ',raw_text),' ')))) # let's get unique word list
nr = length(unique_words) # how many words are in that set?
documents = unlist(strsplit(raw_text,'\n'))
documents = documents[nchar(documents)>50]
nc = length(documents) # number of documents
term.X.doc = matrix(0,nrow=nr,ncol=nc) # let's initialize a term by document matrix
# nrow = number of words / ncol = number of documents
# it's a small set so we can loop... for more complex processes, see dplyr
# it's astonishing
for (i in 1:nc) {
doc_words = unlist(strsplit(documents[i],' '))
ixes = unlist(lapply(doc_words,function(x) { which(unique_words==x) }))
counts = table(ixes)
term.X.doc[as.numeric(names(counts)),i] = counts
}
row.names(term.X.doc) = unique_words
colnames(term.X.doc) = paste("paragraph",1:nc)
term.X.doc = term.X.doc[nchar(row.names(term.X.doc))>2,]
term.X.doc=term.X.doc[rowSums(term.X.doc)>2,]
term.X.doc=log(term.X.doc+1)
term.X.doc=term.X.doc[rowSums(term.X.doc)>0,]
output = 'Matrix done. It is now stored in the variable you set to the left of the equal sign.'
if (speak_output) {
wait(30)
play_audio(output,destfile)
}
print(output)
return(term.X.doc)
}
term_by_doc_matrix = build_term_doc_matrix(raw_text,speak_output=T)
lsa_model = build_lsa_model(term_by_doc_matrix,speak_output=T
)
build_lsa_model = function(txd,ndims=20,speak_output=F,destfile='/Users/rickdale/temp.wav') {
output = 'Now we run SVD to juice the data matrix into informative dimensions. Here we go. Again, might take a minute depending on the amount of text you processed.'
if (speak_output) {
play_audio(output,destfile)
wait(2)
}
print(output)
svd_sol = svd(scale(txd))
row.names(svd_sol$u) = row.names(txd)
output = 'Done! The LSA model is now stored in the variable you set.'
if (speak_output) {
wait(60)
play_audio(output,destfile)
}
print(output)
return(svd_sol$u[,1:ndims])
}
)
lsa_model = build_lsa_model(term_by_doc_matrix,speak_output=T)
help(wait)
build_lsa_model = function(txd,ndims=20,speak_output=F,destfile='/Users/rickdale/temp.wav') {
output = 'Now we run SVD to squeeze the data matrix into informative dimensions. Might take a minute.'
if (speak_output) {
play_audio(output,destfile)
wait(2)
}
print(output)
svd_sol = svd(scale(txd))
row.names(svd_sol$u) = row.names(txd)
output = 'Done! The LSA model is now stored in the variable you set.'
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
return(svd_sol$u[,1:ndims])
}
lsa_model = build_lsa_model(term_by_doc_matrix,speak_output=T)
closest_words(lsa_model,'car',speak_output=T)
closest_words = function(lsa_model,word_1,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
output = 'Computing... this might take a hot minute...'
if (speak_output) {
play_audio(output,destfile)
}
print(output)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
cos_vals = c()
for (i in 1:nrow(lsa_model)) { # faster to do matrix form; but we have a small dataset...
word_2 = words[i]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
cos_vals = c(cos_vals,cos_val)
}
output = paste('Below are the closest words in meaning to',word_1)
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
ixes = sort(cos_vals,decreasing=T,index=T)$ix
for (i in 1:10) {
output = paste(words[ixes[i]],'with a cosine of',round(cos_vals[ixes[i]],2))
print(output)
if (speak_output) {
output = paste(words[ixes[i]],'with a cosine of point',as.english(round(cos_vals[ixes[i]],2)))
library(english)
play_audio(output,destfile)
}
}
}
closest_words(lsa_model,'car',speak_output=T)
cosine_compare = function(lsa_model,word_1,word_2,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
if (!(word_2 %in% words)) {
output = paste0('Sorry, the word ',word_2,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
output = paste('The cosine between words',word_1,'and',word_2,'is',round(cos_val,2))
return(output)
if (speak_output) {
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(100*round(cos_val,2)))
play_audio(output,destfile)
}
}
closest_words = function(lsa_model,word_1,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
output = 'Computing... this might take a hot minute...'
if (speak_output) {
play_audio(output,destfile)
}
print(output)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
cos_vals = c()
for (i in 1:nrow(lsa_model)) { # faster to do matrix form; but we have a small dataset...
word_2 = words[i]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
cos_vals = c(cos_vals,cos_val)
}
output = paste('Below are the closest words in meaning to',word_1)
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
ixes = sort(cos_vals,decreasing=T,index=T)$ix
for (i in 1:10) {
output = paste(words[ixes[i]],'with a cosine of',round(100*cos_vals[ixes[i]],2))
print(output)
if (speak_output) {
output = paste(words[ixes[i]],'with a cosine of point',as.english(100*round(cos_vals[ixes[i]],2)))
library(english)
play_audio(output,destfile)
}
}
}
closest_words(lsa_model,'car',speak_output=T)
cosine_compare = function(lsa_model,word_1,word_2,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
if (!(word_2 %in% words)) {
output = paste0('Sorry, the word ',word_2,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
output = paste('The cosine between words',word_1,'and',word_2,'is',round(cos_val,2))
return(output)
if (speak_output) {
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(round(100*cos_val,2)))
play_audio(output,destfile)
}
}
closest_words = function(lsa_model,word_1,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
output = 'Computing... this might take a hot minute...'
if (speak_output) {
play_audio(output,destfile)
}
print(output)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
cos_vals = c()
for (i in 1:nrow(lsa_model)) { # faster to do matrix form; but we have a small dataset...
word_2 = words[i]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
cos_vals = c(cos_vals,cos_val)
}
output = paste('Below are the closest words in meaning to',word_1)
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
ixes = sort(cos_vals,decreasing=T,index=T)$ix
for (i in 1:10) {
output = paste(words[ixes[i]],'with a cosine of',round(100*cos_vals[ixes[i]],2))
print(output)
if (speak_output) {
output = paste(words[ixes[i]],'with a cosine of point',as.english(round(100*cos_vals[ixes[i]],2)))
library(english)
play_audio(output,destfile)
}
}
}
cosine_compare(lsa_model,'automobile','car',speak_output=T,destfile="C:\temp.wav")
cosine_compare(lsa_model,'automobile','car',speak_output=T)
cosine_compare = function(lsa_model,word_1,word_2,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
if (!(word_2 %in% words)) {
output = paste0('Sorry, the word ',word_2,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
output = paste('The cosine between words',word_1,'and',word_2,'is',round(cos_val,2))
return(output)
if (speak_output) {
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(round(100*cos_val,2)))
play_audio(output,destfile)
}
}
cosine_compare(lsa_model,'automobile','car',speak_output=T)
word_1='car'
word_2='car'
cos_val=.53234
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(round(100*cos_val,2)))
cosine_compare = function(lsa_model,word_1,word_2,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
if (!(word_2 %in% words)) {
output = paste0('Sorry, the word ',word_2,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
output = paste('The cosine between words',word_1,'and',word_2,'is',round(cos_val,2))
return(output)
if (speak_output) {
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(round(100*cos_val,0)))
play_audio(output,destfile)
}
}
closest_words = function(lsa_model,word_1,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
output = 'Computing... this might take a hot minute...'
if (speak_output) {
play_audio(output,destfile)
}
print(output)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
cos_vals = c()
for (i in 1:nrow(lsa_model)) { # faster to do matrix form; but we have a small dataset...
word_2 = words[i]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
cos_vals = c(cos_vals,cos_val)
}
output = paste('Below are the closest words in meaning to',word_1)
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
ixes = sort(cos_vals,decreasing=T,index=T)$ix
for (i in 1:10) {
output = paste(words[ixes[i]],'with a cosine of',round(100*cos_vals[ixes[i]],0))
print(output)
if (speak_output) {
output = paste(words[ixes[i]],'with a cosine of point',as.english(round(100*cos_vals[ixes[i]],0)))
library(english)
play_audio(output,destfile)
}
}
}
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(round(100*cos_val,2)))
cosine_compare(lsa_model,'automobile','car',speak_output=T)
output = paste('The cosine between words',word_1,'and',word_2,'is point',as.english(round(100*cos_val,0)))
play_audio(output,destfile)
destfile='/Users/rickdale/temp.wav'
play_audio(output,destfile)
closest_words = function(lsa_model,word_1,speak_output=F,destfile='/Users/rickdale/temp.wav') {
library(english)
output = 'Computing... this might take a hot minute...'
if (speak_output) {
play_audio(output,destfile)
}
print(output)
words = row.names(lsa_model)
if (!(word_1 %in% words)) {
output = paste0('Sorry, the word ',word_1,' is not in the texts. This may be because it did not occur frequently enough to include in the model. Words have to be present at least 2 or more times in a single text from the data you entered.',collapse='')
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
return(output)
}
word_1_v = lsa_model[which(words==word_1),]
cos_vals = c()
for (i in 1:nrow(lsa_model)) { # faster to do matrix form; but we have a small dataset...
word_2 = words[i]
word_2_v = lsa_model[which(words==word_2),]
cos_val = (word_1_v %*% word_2_v)/(norm_vec(word_1_v)*(norm_vec(word_2_v)))
cos_vals = c(cos_vals,cos_val)
}
output = paste('Below are the closest words in meaning to',word_1)
if (speak_output) {
wait(10)
play_audio(output,destfile)
}
print(output)
ixes = sort(cos_vals,decreasing=T,index=T)$ix
for (i in 1:10) {
output = paste(words[ixes[i]],'with a cosine of',round(100*cos_vals[ixes[i]],0))
print(output)
if (speak_output) {
output = paste(words[ixes[i]],'with a cosine of point',as.english(round(100*cos_vals[ixes[i]],0)))
library(english)
play_audio(output,destfile)
}
}
}
closest_words(lsa_model,'car',speak_output=T)
source('https://raw.githubusercontent.com/racdale/simple-lsa-example/master/lsa_functions.R')
source('https://raw.githubusercontent.com/racdale/simple-lsa-example/master/lsa_functions.R')
